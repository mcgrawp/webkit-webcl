/*
 * Copyright (C) 2011, 2012, 2013 Samsung Electronics Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY SAMSUNG ELECTRONICS CORPORATION AND ITS
 * CONTRIBUTORS "AS IS", AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SAMSUNG
 * ELECTRONICS CORPORATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS, OR BUSINESS INTERRUPTION), HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING
 * NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    Conditional=WEBCL,
] interface WebCLCommandQueue {

    [StrictTypeChecking, Custom] void getInfo(in long queuenfo) raises(DOMException);

    void enqueueWriteBuffer(in WebCLBuffer bufferId,
            in boolean blockingWrite,
            in long offset,
            in long bufferSize,
            in ArrayBufferView ptr,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    void enqueueWriteBuffer(in WebCLBuffer bufferId,
            in boolean blockingWrite,
            in long offset,
            in long bufferSize,
            in ImageData ptr,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    void enqueueWriteBufferRect(in WebCLBuffer bufferId,
            in boolean blockingWrite,
            in Int32Array sourceOrigin,
            in Int32Array targetOrigin,
            in Int32Array region,
            in long sourceRowPitch,
            in long sourceSlicePitch,
            in long targetRowPitch,
            in long targetSlicePitch,
            in ArrayBufferView ptr,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    void enqueueReadBuffer(in WebCLBuffer bufferId,
            in boolean blockingRead,
            in long offset,
            in long bufferSize,
            in ArrayBufferView ptr,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    void enqueueReadBuffer(in WebCLBuffer bufferId,
            in boolean blockingRead,
            in long offset,
            in long bufferSize,
            in ImageData ptr,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    void enqueueReadBufferRect(in WebCLBuffer bufferId,
            in boolean blockingRead,
            in Int32Array sourceOrigin,
            in Int32Array targetOrigin,
            in Int32Array region,
            in long sourceRowPitch,
            in long sourceSlicePitch,
            in long targetRowPitch,
            in long targetSlicePitch,
            in ArrayBufferView ptr,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    void enqueueNDRangeKernel(in WebCLKernel kernel,
            in Int32Array offsets, in Int32Array globalWorkSize,
            in Int32Array localWorkSize, in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    void enqueueWriteImage(in WebCLImage image,
            in boolean blockingWrite,
            in Int32Array origin,
            in Int32Array region,
            in long inputRowPitch,
            in long inputSlicePitch,
            in ArrayBufferView ptr,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event)
        raises(DOMException);

    void enqueueReadImage(in WebCLImage image,
            in boolean blockingRead,
            in Int32Array origin,
            in Int32Array region,
            in long rowPitch,
            in long slicePitch,
            in ArrayBufferView ptr,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event)
        raises(DOMException);

    void enqueueCopyBuffer(in WebCLBuffer sourceBuffer,
            in WebCLBuffer targetBuffer,
            in long sourceOffset,
            in long targetOffset,
            in long sizeInBytes,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    void enqueueCopyBufferRect(in WebCLBuffer sourceBuffer,
            in WebCLBuffer targetBuffer,
            in Int32Array sourceOrigin,
            in Int32Array targetOrigin,
            in Int32Array region,
            in long sourceRowPitch,
            in long sourceSlicePitch,
            in long targetRowPitch,
            in long targetSlicePitch,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises( DOMException );

    void enqueueCopyImage(in WebCLImage sourceImage,
            in WebCLImage targetImage,
            in Int32Array sourceOrigin,
            in Int32Array targetOrigin,
            in Int32Array region,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    void enqueueCopyImageToBuffer(in WebCLImage sourceImage,
            in WebCLBuffer targetBuffer,
            in Int32Array sourceOrigin,
            in Int32Array region,
            in long targetOffset,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    void enqueueCopyBufferToImage(in WebCLBuffer sourceBuffer,
            in WebCLImage targetImage,
            in long sourceOffset,
            in Int32Array targetOrigin,
            in Int32Array region,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    void enqueueBarrier() raises(DOMException);

    void enqueueMarker(in WebCLEvent event) raises(DOMException);

    void enqueueTask(in WebCLKernel kernel,
            in [Optional=DefaultIsUndefined] sequence<WebCLEvent> eventWaitList,
            in [Optional=DefaultIsUndefined] WebCLEvent event) raises(DOMException);

    [Custom] void finish() raises(DOMException);

    void flush() raises(DOMException);
};
