/*
 * Copyright (C) 2011, 2012, 2013 Samsung Electronics Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY SAMSUNG ELECTRONICS CORPORATION AND ITS
 * CONTRIBUTORS "AS IS", AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SAMSUNG
 * ELECTRONICS CORPORATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS, OR BUSINESS INTERRUPTION), HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING
 * NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
typedef unsigned long CLenum;
typedef boolean CLboolean;
typedef unsigned long CLuint;

[
    Conditional=WEBCL,
] interface WebCLCommandQueue {

    [StrictTypeChecking, Custom, RaisesException] void getInfo(CLenum queuenfo);

    [RaisesException] void enqueueWriteBuffer(WebCLBuffer bufferId,
            CLboolean blockingWrite,
            CLuint offset,
            CLuint bufferSize,
            ArrayBufferView ptr,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueWriteBuffer(WebCLBuffer bufferId,
            CLboolean blockingWrite,
            CLuint offset,
            CLuint bufferSize,
            ImageData ptr,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueWriteBufferRect(WebCLBuffer bufferId,
            CLboolean blockingWrite,
            Int32Array sourceOrigin,
            Int32Array targetOrigin,
            Int32Array region,
            CLuint sourceRowPitch,
            CLuint sourceSlicePitch,
            CLuint targetRowPitch,
            CLuint targetSlicePitch,
            ArrayBufferView ptr,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueReadBuffer(WebCLBuffer bufferId,
            CLboolean blockingRead,
            CLuint offset,
            CLuint bufferSize,
            ArrayBufferView ptr,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueReadBuffer(WebCLBuffer bufferId,
            CLboolean blockingRead,
            CLuint offset,
            CLuint bufferSize,
            ImageData ptr,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueReadBufferRect(WebCLBuffer bufferId,
            CLboolean blockingRead,
            Int32Array sourceOrigin,
            Int32Array targetOrigin,
            Int32Array region,
            CLuint sourceRowPitch,
            CLuint sourceSlicePitch,
            CLuint targetRowPitch,
            CLuint targetSlicePitch,
            ArrayBufferView ptr,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueNDRangeKernel(WebCLKernel kernel,
            Int32Array offsets, Int32Array globalWorkSize,
            Int32Array localWorkSize, [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueWriteImage(WebCLImage image,
            CLboolean blockingWrite,
            Int32Array origin,
            Int32Array region,
            CLuint inputRowPitch,
            ArrayBufferView ptr,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueReadImage(WebCLImage image,
            CLboolean blockingRead,
            Int32Array origin,
            Int32Array region,
            CLuint rowPitch,
            ArrayBufferView ptr,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueCopyBuffer(WebCLBuffer sourceBuffer,
            WebCLBuffer targetBuffer,
            CLuint sourceOffset,
            CLuint targetOffset,
            CLuint sizeInBytes,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueCopyBufferRect(WebCLBuffer sourceBuffer,
            WebCLBuffer targetBuffer,
            Int32Array sourceOrigin,
            Int32Array targetOrigin,
            Int32Array region,
            CLuint sourceRowPitch,
            CLuint sourceSlicePitch,
            CLuint targetRowPitch,
            CLuint targetSlicePitch,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueCopyImage(WebCLImage sourceImage,
            WebCLImage targetImage,
            Int32Array sourceOrigin,
            Int32Array targetOrigin,
            Int32Array region,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueCopyImageToBuffer(WebCLImage sourceImage,
            WebCLBuffer targetBuffer,
            Int32Array sourceOrigin,
            Int32Array region,
            CLuint targetOffset,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueCopyBufferToImage(WebCLBuffer sourceBuffer,
            WebCLImage targetImage,
            CLuint sourceOffset,
            Int32Array targetOrigin,
            Int32Array region,
            [Default=Undefined] optional sequence<WebCLEvent> eventWaitList,
            [Default=Undefined] optional WebCLEvent event);

    [RaisesException] void enqueueBarrier();

    [RaisesException] void enqueueMarker(WebCLEvent event);

    [Custom, RaisesException] void finish();

    [RaisesException] void flush();
};
