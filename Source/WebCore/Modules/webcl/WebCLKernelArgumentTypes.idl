/*
 * Copyright (C) 2011, 2012, 2013 Samsung Electronics Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY SAMSUNG ELECTRONICS CORPORATION AND ITS
 * CONTRIBUTORS "AS IS", AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SAMSUNG
 * ELECTRONICS CORPORATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS, OR BUSINESS INTERRUPTION), HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING
 * NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

interface [
    Conditional=WEBCL,
] WebCLKernelArgumentTypes {
    // Scalar types; may be bitwise-OR'ed with a vector type
    const unsigned long CHAR   = 0;
    const unsigned long UCHAR  = 1;
    const unsigned long SHORT  = 2;
    const unsigned long USHORT = 3;
    const unsigned long INT    = 4;
    const unsigned long UINT   = 5;
    const unsigned long LONG   = 6;
    const unsigned long ULONG  = 7;
    const unsigned long FLOAT  = 8;
    const unsigned long HALF   = 9;    // not supported in all implementations
    const unsigned long DOUBLE = 10;   // not supported in all implementations

    // Vector types; must be bitwise-OR'ed with a scalar type
    const unsigned long VEC2  = 0x0100;
    const unsigned long VEC3  = 0x0200;
    const unsigned long VEC4  = 0x0400;
    const unsigned long VEC8  = 0x0800;
    const unsigned long VEC16 = 0x1000;

    // Special types; must not be bitwise-OR'ed with any other type
    const unsigned long LOCAL_MEMORY_SIZE = 255;
};
