/*
 * Copyright (C) 2011, 2012, 2013 Samsung Electronics Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY SAMSUNG ELECTRONICS CORPORATION AND ITS
 * CONTRIBUTORS "AS IS", AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SAMSUNG
 * ELECTRONICS CORPORATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS, OR BUSINESS INTERRUPTION), HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING
 * NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    Conditional=WEBCL,
] interface WebCLContext {
    // FIXME: Wrong return type.
    [StrictTypeChecking, Custom, RaisesException] void getInfo (in long contextInfo);

    [RaisesException] WebCLEvent createUserEvent();

    [RaisesException] sequence<WebCLImageDescriptor> getSupportedImageFormats(in long memFlags);

    [RaisesException] WebCLCommandQueue createCommandQueue(in [Default=Undefined] optional WebCLDevice device, in [Default=Undefined] optional long prop);

    [RaisesException] WebCLProgram createProgram(in DOMString kernelSource);

    [StrictTypeChecking, RaisesException] WebCLBuffer createBuffer(in long memFlags, in ImageData srcPixels);
    [StrictTypeChecking, RaisesException] WebCLBuffer createBuffer(in long memFlags, in HTMLCanvasElement srcCanvas);
    [StrictTypeChecking, RaisesException] WebCLBuffer createBuffer(in long memFlags, in long sizeInBytes, in [Default=Undefined] optional ArrayBuffer srcBuffer);

    [RaisesException] WebCLSampler createSampler(in boolean normCords, in long addrMode, in long fltrMode);

    // FIXME: Use overloading provided by our IDL code generator when
    // WebIDL dictionary gets fully supported: issue #110.
    [StrictTypeChecking, Custom, RaisesException] WebCLImage createImage(in long flags, in HTMLCanvasElement canvasElement);
    [StrictTypeChecking, Custom, RaisesException] WebCLImage createImage(in long flags, in ImageData data);
    [StrictTypeChecking, Custom, RaisesException] WebCLImage createImage(in long flags, in HTMLVideoElement videoElement);
    [StrictTypeChecking, Custom, RaisesException] WebCLImage createImage(in long flags, in HTMLImageElement imageElement);
    [StrictTypeChecking, Custom, RaisesException] WebCLImage createImage(in long flags, in WebCLImageDescriptor descriptor, in [Default=Undefined] optional ArrayBuffer srcBuffer);
};
