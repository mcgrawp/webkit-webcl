/*
* Copyright (C) 2011 Samsung Electronics Corporation. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided the following conditions
* are met:
*
* 1.  Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*
* 2.  Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in the
*     documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY SAMSUNG ELECTRONICS CORPORATION AND ITS
* CONTRIBUTORS "AS IS", AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING
* BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SAMSUNG
* ELECTRONICS CORPORATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS, OR BUSINESS INTERRUPTION), HOWEVER CAUSED AND ON ANY THEORY
* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING
* NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

module webcl {
    interface [
        Conditional=WEBCL ,
    ] WebCLContext {
    [StrictTypeChecking , Custom]  void getInfo (in long contextinfo) raises(DOMException);

    WebCLEvent createUserEvent() raises(DOMException);
    sequence<WebCLImageDescriptor> getSupportedImageFormats(in long memFlags) raises(DOMException);

    WebCLCommandQueue createCommandQueue(in [Optional] WebCLDevice device, in [Optional] long prop)
        raises(DOMException);

    WebCLProgram createProgram(in DOMString kernelSource) raises(DOMException);

    [StrictTypeChecking] WebCLBuffer createBuffer(in long memFlags , in ImageData srcPixels) raises(DOMException);
    [StrictTypeChecking] WebCLBuffer createBuffer(in long memFlags , in HTMLCanvasElement srcCanvas)
        raises(DOMException);
    [StrictTypeChecking] WebCLBuffer createBuffer(
        in long memFlags
        , in long sizeInBytes
        , in [Optional] ArrayBuffer srcBuffer) raises(DOMException);

    WebCLSampler createSampler(in boolean normCords , in long addrMode , in long fltrMode) raises(DOMException);

    // FIXME: Use overloading provided by our IDL code generator when
    // WebIDL dictionary gets fully supported: issue #110.
    [StrictTypeChecking, Custom] WebCLImage createImage(in long flags, in HTMLCanvasElement canvasElement) raises (DOMException);
    [StrictTypeChecking, Custom] WebCLImage createImage(in long flags, in ImageData data) raises(DOMException);
    [StrictTypeChecking, Custom] WebCLImage createImage(in long flags, in HTMLVideoElement videoElement) raises(DOMException);
    [StrictTypeChecking, Custom] WebCLImage createImage(in long flags, in HTMLImageElement imageElement) raises(DOMException);
    [StrictTypeChecking, Custom] WebCLImage createImage(in long flags, in WebCLImageDescriptor descriptor,
        in [Optional] ArrayBuffer srcBuffer) raises(DOMException);

    WebCLBuffer createFromGLBuffer(in long flags , in WebGLBuffer bufobj) raises(DOMException);

    WebCLImage createFromGLRenderBuffer(in long flags , in WebGLRenderbuffer renderbufferobj) raises(DOMException);
    WebCLMemoryObject createFromGLTexture2D(in long flags
        , in unsigned long textureTarget
        , in long miplevel
        , in unsigned long texture) raises(DOMException);

    };
}
